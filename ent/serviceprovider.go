// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ochanoco/proxy/ent/serviceprovider"
)

// ServiceProvider is the model entity for the ServiceProvider schema.
type ServiceProvider struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Host holds the value of the "host" field.
	Host string `json:"host,omitempty"`
	// DestinationIP holds the value of the "destination_ip" field.
	DestinationIP string `json:"destination_ip,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceProviderQuery when eager-loading is set.
	Edges ServiceProviderEdges `json:"edges"`
}

// ServiceProviderEdges holds the relations/edges for other nodes in the graph.
type ServiceProviderEdges struct {
	// Whitelists holds the value of the whitelists edge.
	Whitelists []*WhiteList `json:"whitelists,omitempty"`
	// AuthorizationCodes holds the value of the authorization_codes edge.
	AuthorizationCodes []*AuthorizationCode `json:"authorization_codes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// WhitelistsOrErr returns the Whitelists value or an error if the edge
// was not loaded in eager-loading.
func (e ServiceProviderEdges) WhitelistsOrErr() ([]*WhiteList, error) {
	if e.loadedTypes[0] {
		return e.Whitelists, nil
	}
	return nil, &NotLoadedError{edge: "whitelists"}
}

// AuthorizationCodesOrErr returns the AuthorizationCodes value or an error if the edge
// was not loaded in eager-loading.
func (e ServiceProviderEdges) AuthorizationCodesOrErr() ([]*AuthorizationCode, error) {
	if e.loadedTypes[1] {
		return e.AuthorizationCodes, nil
	}
	return nil, &NotLoadedError{edge: "authorization_codes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceProvider) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case serviceprovider.FieldID:
			values[i] = new(sql.NullInt64)
		case serviceprovider.FieldHost, serviceprovider.FieldDestinationIP:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ServiceProvider", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceProvider fields.
func (sp *ServiceProvider) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case serviceprovider.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sp.ID = int(value.Int64)
		case serviceprovider.FieldHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host", values[i])
			} else if value.Valid {
				sp.Host = value.String
			}
		case serviceprovider.FieldDestinationIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field destination_ip", values[i])
			} else if value.Valid {
				sp.DestinationIP = value.String
			}
		}
	}
	return nil
}

// QueryWhitelists queries the "whitelists" edge of the ServiceProvider entity.
func (sp *ServiceProvider) QueryWhitelists() *WhiteListQuery {
	return (&ServiceProviderClient{config: sp.config}).QueryWhitelists(sp)
}

// QueryAuthorizationCodes queries the "authorization_codes" edge of the ServiceProvider entity.
func (sp *ServiceProvider) QueryAuthorizationCodes() *AuthorizationCodeQuery {
	return (&ServiceProviderClient{config: sp.config}).QueryAuthorizationCodes(sp)
}

// Update returns a builder for updating this ServiceProvider.
// Note that you need to call ServiceProvider.Unwrap() before calling this method if this ServiceProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *ServiceProvider) Update() *ServiceProviderUpdateOne {
	return (&ServiceProviderClient{config: sp.config}).UpdateOne(sp)
}

// Unwrap unwraps the ServiceProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *ServiceProvider) Unwrap() *ServiceProvider {
	_tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceProvider is not a transactional entity")
	}
	sp.config.driver = _tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *ServiceProvider) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceProvider(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sp.ID))
	builder.WriteString("host=")
	builder.WriteString(sp.Host)
	builder.WriteString(", ")
	builder.WriteString("destination_ip=")
	builder.WriteString(sp.DestinationIP)
	builder.WriteByte(')')
	return builder.String()
}

// ServiceProviders is a parsable slice of ServiceProvider.
type ServiceProviders []*ServiceProvider

func (sp ServiceProviders) config(cfg config) {
	for _i := range sp {
		sp[_i].config = cfg
	}
}
