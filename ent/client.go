// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/ochanoco/database/ent/migrate"

	"github.com/ochanoco/database/ent/serviceprovider"
	"github.com/ochanoco/database/ent/whitelist"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ServiceProvider is the client for interacting with the ServiceProvider builders.
	ServiceProvider *ServiceProviderClient
	// WhiteList is the client for interacting with the WhiteList builders.
	WhiteList *WhiteListClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ServiceProvider = NewServiceProviderClient(c.config)
	c.WhiteList = NewWhiteListClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		ServiceProvider: NewServiceProviderClient(cfg),
		WhiteList:       NewWhiteListClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		ServiceProvider: NewServiceProviderClient(cfg),
		WhiteList:       NewWhiteListClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ServiceProvider.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ServiceProvider.Use(hooks...)
	c.WhiteList.Use(hooks...)
}

// ServiceProviderClient is a client for the ServiceProvider schema.
type ServiceProviderClient struct {
	config
}

// NewServiceProviderClient returns a client for the ServiceProvider from the given config.
func NewServiceProviderClient(c config) *ServiceProviderClient {
	return &ServiceProviderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `serviceprovider.Hooks(f(g(h())))`.
func (c *ServiceProviderClient) Use(hooks ...Hook) {
	c.hooks.ServiceProvider = append(c.hooks.ServiceProvider, hooks...)
}

// Create returns a builder for creating a ServiceProvider entity.
func (c *ServiceProviderClient) Create() *ServiceProviderCreate {
	mutation := newServiceProviderMutation(c.config, OpCreate)
	return &ServiceProviderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServiceProvider entities.
func (c *ServiceProviderClient) CreateBulk(builders ...*ServiceProviderCreate) *ServiceProviderCreateBulk {
	return &ServiceProviderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServiceProvider.
func (c *ServiceProviderClient) Update() *ServiceProviderUpdate {
	mutation := newServiceProviderMutation(c.config, OpUpdate)
	return &ServiceProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceProviderClient) UpdateOne(sp *ServiceProvider) *ServiceProviderUpdateOne {
	mutation := newServiceProviderMutation(c.config, OpUpdateOne, withServiceProvider(sp))
	return &ServiceProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceProviderClient) UpdateOneID(id int) *ServiceProviderUpdateOne {
	mutation := newServiceProviderMutation(c.config, OpUpdateOne, withServiceProviderID(id))
	return &ServiceProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServiceProvider.
func (c *ServiceProviderClient) Delete() *ServiceProviderDelete {
	mutation := newServiceProviderMutation(c.config, OpDelete)
	return &ServiceProviderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServiceProviderClient) DeleteOne(sp *ServiceProvider) *ServiceProviderDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServiceProviderClient) DeleteOneID(id int) *ServiceProviderDeleteOne {
	builder := c.Delete().Where(serviceprovider.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceProviderDeleteOne{builder}
}

// Query returns a query builder for ServiceProvider.
func (c *ServiceProviderClient) Query() *ServiceProviderQuery {
	return &ServiceProviderQuery{
		config: c.config,
	}
}

// Get returns a ServiceProvider entity by its id.
func (c *ServiceProviderClient) Get(ctx context.Context, id int) (*ServiceProvider, error) {
	return c.Query().Where(serviceprovider.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceProviderClient) GetX(ctx context.Context, id int) *ServiceProvider {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWhitelists queries the whitelists edge of a ServiceProvider.
func (c *ServiceProviderClient) QueryWhitelists(sp *ServiceProvider) *WhiteListQuery {
	query := &WhiteListQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serviceprovider.Table, serviceprovider.FieldID, id),
			sqlgraph.To(whitelist.Table, whitelist.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, serviceprovider.WhitelistsTable, serviceprovider.WhitelistsColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServiceProviderClient) Hooks() []Hook {
	return c.hooks.ServiceProvider
}

// WhiteListClient is a client for the WhiteList schema.
type WhiteListClient struct {
	config
}

// NewWhiteListClient returns a client for the WhiteList from the given config.
func NewWhiteListClient(c config) *WhiteListClient {
	return &WhiteListClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `whitelist.Hooks(f(g(h())))`.
func (c *WhiteListClient) Use(hooks ...Hook) {
	c.hooks.WhiteList = append(c.hooks.WhiteList, hooks...)
}

// Create returns a builder for creating a WhiteList entity.
func (c *WhiteListClient) Create() *WhiteListCreate {
	mutation := newWhiteListMutation(c.config, OpCreate)
	return &WhiteListCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WhiteList entities.
func (c *WhiteListClient) CreateBulk(builders ...*WhiteListCreate) *WhiteListCreateBulk {
	return &WhiteListCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WhiteList.
func (c *WhiteListClient) Update() *WhiteListUpdate {
	mutation := newWhiteListMutation(c.config, OpUpdate)
	return &WhiteListUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WhiteListClient) UpdateOne(wl *WhiteList) *WhiteListUpdateOne {
	mutation := newWhiteListMutation(c.config, OpUpdateOne, withWhiteList(wl))
	return &WhiteListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WhiteListClient) UpdateOneID(id int) *WhiteListUpdateOne {
	mutation := newWhiteListMutation(c.config, OpUpdateOne, withWhiteListID(id))
	return &WhiteListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WhiteList.
func (c *WhiteListClient) Delete() *WhiteListDelete {
	mutation := newWhiteListMutation(c.config, OpDelete)
	return &WhiteListDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WhiteListClient) DeleteOne(wl *WhiteList) *WhiteListDeleteOne {
	return c.DeleteOneID(wl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WhiteListClient) DeleteOneID(id int) *WhiteListDeleteOne {
	builder := c.Delete().Where(whitelist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WhiteListDeleteOne{builder}
}

// Query returns a query builder for WhiteList.
func (c *WhiteListClient) Query() *WhiteListQuery {
	return &WhiteListQuery{
		config: c.config,
	}
}

// Get returns a WhiteList entity by its id.
func (c *WhiteListClient) Get(ctx context.Context, id int) (*WhiteList, error) {
	return c.Query().Where(whitelist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WhiteListClient) GetX(ctx context.Context, id int) *WhiteList {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a WhiteList.
func (c *WhiteListClient) QueryOwner(wl *WhiteList) *ServiceProviderQuery {
	query := &ServiceProviderQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(whitelist.Table, whitelist.FieldID, id),
			sqlgraph.To(serviceprovider.Table, serviceprovider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, whitelist.OwnerTable, whitelist.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(wl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WhiteListClient) Hooks() []Hook {
	return c.hooks.WhiteList
}
