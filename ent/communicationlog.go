// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ochanoco/proxy/ent/communicationlog"
)

// CommunicationLog is the model entity for the CommunicationLog schema.
type CommunicationLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// Headers holds the value of the "headers" field.
	Headers string `json:"headers,omitempty"`
	// Body holds the value of the "body" field.
	Body []byte `json:"body,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CommunicationLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case communicationlog.FieldBody:
			values[i] = new([]byte)
		case communicationlog.FieldID:
			values[i] = new(sql.NullInt64)
		case communicationlog.FieldType, communicationlog.FieldHeaders:
			values[i] = new(sql.NullString)
		case communicationlog.FieldTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CommunicationLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CommunicationLog fields.
func (cl *CommunicationLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case communicationlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cl.ID = int(value.Int64)
		case communicationlog.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				cl.Type = value.String
			}
		case communicationlog.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				cl.Time = value.Time
			}
		case communicationlog.FieldHeaders:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field headers", values[i])
			} else if value.Valid {
				cl.Headers = value.String
			}
		case communicationlog.FieldBody:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value != nil {
				cl.Body = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CommunicationLog.
// Note that you need to call CommunicationLog.Unwrap() before calling this method if this CommunicationLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (cl *CommunicationLog) Update() *CommunicationLogUpdateOne {
	return (&CommunicationLogClient{config: cl.config}).UpdateOne(cl)
}

// Unwrap unwraps the CommunicationLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cl *CommunicationLog) Unwrap() *CommunicationLog {
	_tx, ok := cl.config.driver.(*txDriver)
	if !ok {
		panic("ent: CommunicationLog is not a transactional entity")
	}
	cl.config.driver = _tx.drv
	return cl
}

// String implements the fmt.Stringer.
func (cl *CommunicationLog) String() string {
	var builder strings.Builder
	builder.WriteString("CommunicationLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cl.ID))
	builder.WriteString("type=")
	builder.WriteString(cl.Type)
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(cl.Time.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("headers=")
	builder.WriteString(cl.Headers)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(fmt.Sprintf("%v", cl.Body))
	builder.WriteByte(')')
	return builder.String()
}

// CommunicationLogs is a parsable slice of CommunicationLog.
type CommunicationLogs []*CommunicationLog

func (cl CommunicationLogs) config(cfg config) {
	for _i := range cl {
		cl[_i].config = cfg
	}
}
