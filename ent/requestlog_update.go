// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ochanoco/proxy/ent/predicate"
	"github.com/ochanoco/proxy/ent/requestlog"
)

// RequestLogUpdate is the builder for updating RequestLog entities.
type RequestLogUpdate struct {
	config
	hooks    []Hook
	mutation *RequestLogMutation
}

// Where appends a list predicates to the RequestLogUpdate builder.
func (rlu *RequestLogUpdate) Where(ps ...predicate.RequestLog) *RequestLogUpdate {
	rlu.mutation.Where(ps...)
	return rlu
}

// SetTime sets the "time" field.
func (rlu *RequestLogUpdate) SetTime(t time.Time) *RequestLogUpdate {
	rlu.mutation.SetTime(t)
	return rlu
}

// SetHeaders sets the "headers" field.
func (rlu *RequestLogUpdate) SetHeaders(s string) *RequestLogUpdate {
	rlu.mutation.SetHeaders(s)
	return rlu
}

// SetBody sets the "body" field.
func (rlu *RequestLogUpdate) SetBody(b []byte) *RequestLogUpdate {
	rlu.mutation.SetBody(b)
	return rlu
}

// ClearBody clears the value of the "body" field.
func (rlu *RequestLogUpdate) ClearBody() *RequestLogUpdate {
	rlu.mutation.ClearBody()
	return rlu
}

// SetFlag sets the "flag" field.
func (rlu *RequestLogUpdate) SetFlag(s string) *RequestLogUpdate {
	rlu.mutation.SetFlag(s)
	return rlu
}

// SetNillableFlag sets the "flag" field if the given value is not nil.
func (rlu *RequestLogUpdate) SetNillableFlag(s *string) *RequestLogUpdate {
	if s != nil {
		rlu.SetFlag(*s)
	}
	return rlu
}

// Mutation returns the RequestLogMutation object of the builder.
func (rlu *RequestLogUpdate) Mutation() *RequestLogMutation {
	return rlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rlu *RequestLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rlu.hooks) == 0 {
		affected, err = rlu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RequestLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rlu.mutation = mutation
			affected, err = rlu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rlu.hooks) - 1; i >= 0; i-- {
			if rlu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rlu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rlu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rlu *RequestLogUpdate) SaveX(ctx context.Context) int {
	affected, err := rlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rlu *RequestLogUpdate) Exec(ctx context.Context) error {
	_, err := rlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlu *RequestLogUpdate) ExecX(ctx context.Context) {
	if err := rlu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rlu *RequestLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   requestlog.Table,
			Columns: requestlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: requestlog.FieldID,
			},
		},
	}
	if ps := rlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rlu.mutation.Time(); ok {
		_spec.SetField(requestlog.FieldTime, field.TypeTime, value)
	}
	if value, ok := rlu.mutation.Headers(); ok {
		_spec.SetField(requestlog.FieldHeaders, field.TypeString, value)
	}
	if value, ok := rlu.mutation.Body(); ok {
		_spec.SetField(requestlog.FieldBody, field.TypeBytes, value)
	}
	if rlu.mutation.BodyCleared() {
		_spec.ClearField(requestlog.FieldBody, field.TypeBytes)
	}
	if value, ok := rlu.mutation.Flag(); ok {
		_spec.SetField(requestlog.FieldFlag, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requestlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// RequestLogUpdateOne is the builder for updating a single RequestLog entity.
type RequestLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RequestLogMutation
}

// SetTime sets the "time" field.
func (rluo *RequestLogUpdateOne) SetTime(t time.Time) *RequestLogUpdateOne {
	rluo.mutation.SetTime(t)
	return rluo
}

// SetHeaders sets the "headers" field.
func (rluo *RequestLogUpdateOne) SetHeaders(s string) *RequestLogUpdateOne {
	rluo.mutation.SetHeaders(s)
	return rluo
}

// SetBody sets the "body" field.
func (rluo *RequestLogUpdateOne) SetBody(b []byte) *RequestLogUpdateOne {
	rluo.mutation.SetBody(b)
	return rluo
}

// ClearBody clears the value of the "body" field.
func (rluo *RequestLogUpdateOne) ClearBody() *RequestLogUpdateOne {
	rluo.mutation.ClearBody()
	return rluo
}

// SetFlag sets the "flag" field.
func (rluo *RequestLogUpdateOne) SetFlag(s string) *RequestLogUpdateOne {
	rluo.mutation.SetFlag(s)
	return rluo
}

// SetNillableFlag sets the "flag" field if the given value is not nil.
func (rluo *RequestLogUpdateOne) SetNillableFlag(s *string) *RequestLogUpdateOne {
	if s != nil {
		rluo.SetFlag(*s)
	}
	return rluo
}

// Mutation returns the RequestLogMutation object of the builder.
func (rluo *RequestLogUpdateOne) Mutation() *RequestLogMutation {
	return rluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rluo *RequestLogUpdateOne) Select(field string, fields ...string) *RequestLogUpdateOne {
	rluo.fields = append([]string{field}, fields...)
	return rluo
}

// Save executes the query and returns the updated RequestLog entity.
func (rluo *RequestLogUpdateOne) Save(ctx context.Context) (*RequestLog, error) {
	var (
		err  error
		node *RequestLog
	)
	if len(rluo.hooks) == 0 {
		node, err = rluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RequestLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rluo.mutation = mutation
			node, err = rluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rluo.hooks) - 1; i >= 0; i-- {
			if rluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rluo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rluo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*RequestLog)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RequestLogMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rluo *RequestLogUpdateOne) SaveX(ctx context.Context) *RequestLog {
	node, err := rluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rluo *RequestLogUpdateOne) Exec(ctx context.Context) error {
	_, err := rluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rluo *RequestLogUpdateOne) ExecX(ctx context.Context) {
	if err := rluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rluo *RequestLogUpdateOne) sqlSave(ctx context.Context) (_node *RequestLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   requestlog.Table,
			Columns: requestlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: requestlog.FieldID,
			},
		},
	}
	id, ok := rluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RequestLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, requestlog.FieldID)
		for _, f := range fields {
			if !requestlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != requestlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rluo.mutation.Time(); ok {
		_spec.SetField(requestlog.FieldTime, field.TypeTime, value)
	}
	if value, ok := rluo.mutation.Headers(); ok {
		_spec.SetField(requestlog.FieldHeaders, field.TypeString, value)
	}
	if value, ok := rluo.mutation.Body(); ok {
		_spec.SetField(requestlog.FieldBody, field.TypeBytes, value)
	}
	if rluo.mutation.BodyCleared() {
		_spec.ClearField(requestlog.FieldBody, field.TypeBytes)
	}
	if value, ok := rluo.mutation.Flag(); ok {
		_spec.SetField(requestlog.FieldFlag, field.TypeString, value)
	}
	_node = &RequestLog{config: rluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requestlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
