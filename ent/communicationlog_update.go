// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ochanoco/proxy/ent/communicationlog"
	"github.com/ochanoco/proxy/ent/predicate"
)

// CommunicationLogUpdate is the builder for updating CommunicationLog entities.
type CommunicationLogUpdate struct {
	config
	hooks    []Hook
	mutation *CommunicationLogMutation
}

// Where appends a list predicates to the CommunicationLogUpdate builder.
func (clu *CommunicationLogUpdate) Where(ps ...predicate.CommunicationLog) *CommunicationLogUpdate {
	clu.mutation.Where(ps...)
	return clu
}

// SetType sets the "type" field.
func (clu *CommunicationLogUpdate) SetType(s string) *CommunicationLogUpdate {
	clu.mutation.SetType(s)
	return clu
}

// SetTime sets the "time" field.
func (clu *CommunicationLogUpdate) SetTime(t time.Time) *CommunicationLogUpdate {
	clu.mutation.SetTime(t)
	return clu
}

// SetHeaders sets the "headers" field.
func (clu *CommunicationLogUpdate) SetHeaders(s string) *CommunicationLogUpdate {
	clu.mutation.SetHeaders(s)
	return clu
}

// SetBody sets the "body" field.
func (clu *CommunicationLogUpdate) SetBody(b []byte) *CommunicationLogUpdate {
	clu.mutation.SetBody(b)
	return clu
}

// ClearBody clears the value of the "body" field.
func (clu *CommunicationLogUpdate) ClearBody() *CommunicationLogUpdate {
	clu.mutation.ClearBody()
	return clu
}

// Mutation returns the CommunicationLogMutation object of the builder.
func (clu *CommunicationLogUpdate) Mutation() *CommunicationLogMutation {
	return clu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clu *CommunicationLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(clu.hooks) == 0 {
		affected, err = clu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommunicationLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			clu.mutation = mutation
			affected, err = clu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(clu.hooks) - 1; i >= 0; i-- {
			if clu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = clu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, clu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (clu *CommunicationLogUpdate) SaveX(ctx context.Context) int {
	affected, err := clu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clu *CommunicationLogUpdate) Exec(ctx context.Context) error {
	_, err := clu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clu *CommunicationLogUpdate) ExecX(ctx context.Context) {
	if err := clu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (clu *CommunicationLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   communicationlog.Table,
			Columns: communicationlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: communicationlog.FieldID,
			},
		},
	}
	if ps := clu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := clu.mutation.GetType(); ok {
		_spec.SetField(communicationlog.FieldType, field.TypeString, value)
	}
	if value, ok := clu.mutation.Time(); ok {
		_spec.SetField(communicationlog.FieldTime, field.TypeTime, value)
	}
	if value, ok := clu.mutation.Headers(); ok {
		_spec.SetField(communicationlog.FieldHeaders, field.TypeString, value)
	}
	if value, ok := clu.mutation.Body(); ok {
		_spec.SetField(communicationlog.FieldBody, field.TypeBytes, value)
	}
	if clu.mutation.BodyCleared() {
		_spec.ClearField(communicationlog.FieldBody, field.TypeBytes)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, clu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{communicationlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CommunicationLogUpdateOne is the builder for updating a single CommunicationLog entity.
type CommunicationLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommunicationLogMutation
}

// SetType sets the "type" field.
func (cluo *CommunicationLogUpdateOne) SetType(s string) *CommunicationLogUpdateOne {
	cluo.mutation.SetType(s)
	return cluo
}

// SetTime sets the "time" field.
func (cluo *CommunicationLogUpdateOne) SetTime(t time.Time) *CommunicationLogUpdateOne {
	cluo.mutation.SetTime(t)
	return cluo
}

// SetHeaders sets the "headers" field.
func (cluo *CommunicationLogUpdateOne) SetHeaders(s string) *CommunicationLogUpdateOne {
	cluo.mutation.SetHeaders(s)
	return cluo
}

// SetBody sets the "body" field.
func (cluo *CommunicationLogUpdateOne) SetBody(b []byte) *CommunicationLogUpdateOne {
	cluo.mutation.SetBody(b)
	return cluo
}

// ClearBody clears the value of the "body" field.
func (cluo *CommunicationLogUpdateOne) ClearBody() *CommunicationLogUpdateOne {
	cluo.mutation.ClearBody()
	return cluo
}

// Mutation returns the CommunicationLogMutation object of the builder.
func (cluo *CommunicationLogUpdateOne) Mutation() *CommunicationLogMutation {
	return cluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cluo *CommunicationLogUpdateOne) Select(field string, fields ...string) *CommunicationLogUpdateOne {
	cluo.fields = append([]string{field}, fields...)
	return cluo
}

// Save executes the query and returns the updated CommunicationLog entity.
func (cluo *CommunicationLogUpdateOne) Save(ctx context.Context) (*CommunicationLog, error) {
	var (
		err  error
		node *CommunicationLog
	)
	if len(cluo.hooks) == 0 {
		node, err = cluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommunicationLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cluo.mutation = mutation
			node, err = cluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cluo.hooks) - 1; i >= 0; i-- {
			if cluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cluo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cluo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CommunicationLog)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CommunicationLogMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cluo *CommunicationLogUpdateOne) SaveX(ctx context.Context) *CommunicationLog {
	node, err := cluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cluo *CommunicationLogUpdateOne) Exec(ctx context.Context) error {
	_, err := cluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluo *CommunicationLogUpdateOne) ExecX(ctx context.Context) {
	if err := cluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cluo *CommunicationLogUpdateOne) sqlSave(ctx context.Context) (_node *CommunicationLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   communicationlog.Table,
			Columns: communicationlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: communicationlog.FieldID,
			},
		},
	}
	id, ok := cluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CommunicationLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, communicationlog.FieldID)
		for _, f := range fields {
			if !communicationlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != communicationlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cluo.mutation.GetType(); ok {
		_spec.SetField(communicationlog.FieldType, field.TypeString, value)
	}
	if value, ok := cluo.mutation.Time(); ok {
		_spec.SetField(communicationlog.FieldTime, field.TypeTime, value)
	}
	if value, ok := cluo.mutation.Headers(); ok {
		_spec.SetField(communicationlog.FieldHeaders, field.TypeString, value)
	}
	if value, ok := cluo.mutation.Body(); ok {
		_spec.SetField(communicationlog.FieldBody, field.TypeBytes, value)
	}
	if cluo.mutation.BodyCleared() {
		_spec.ClearField(communicationlog.FieldBody, field.TypeBytes)
	}
	_node = &CommunicationLog{config: cluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{communicationlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
