// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ochanoco/proxy/ent/hashchain"
	"github.com/ochanoco/proxy/ent/servicelog"
)

// HashChain is the model entity for the HashChain schema.
type HashChain struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash []byte `json:"hash,omitempty"`
	// Signature holds the value of the "signature" field.
	Signature []byte `json:"signature,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HashChainQuery when eager-loading is set.
	Edges                  HashChainEdges `json:"edges"`
	service_log_hashchains *int
}

// HashChainEdges holds the relations/edges for other nodes in the graph.
type HashChainEdges struct {
	// Log holds the value of the log edge.
	Log *ServiceLog `json:"log,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LogOrErr returns the Log value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HashChainEdges) LogOrErr() (*ServiceLog, error) {
	if e.loadedTypes[0] {
		if e.Log == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: servicelog.Label}
		}
		return e.Log, nil
	}
	return nil, &NotLoadedError{edge: "log"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HashChain) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hashchain.FieldHash, hashchain.FieldSignature:
			values[i] = new([]byte)
		case hashchain.FieldID:
			values[i] = new(sql.NullInt64)
		case hashchain.ForeignKeys[0]: // service_log_hashchains
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type HashChain", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HashChain fields.
func (hc *HashChain) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hashchain.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hc.ID = int(value.Int64)
		case hashchain.FieldHash:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value != nil {
				hc.Hash = *value
			}
		case hashchain.FieldSignature:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field signature", values[i])
			} else if value != nil {
				hc.Signature = *value
			}
		case hashchain.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field service_log_hashchains", value)
			} else if value.Valid {
				hc.service_log_hashchains = new(int)
				*hc.service_log_hashchains = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryLog queries the "log" edge of the HashChain entity.
func (hc *HashChain) QueryLog() *ServiceLogQuery {
	return (&HashChainClient{config: hc.config}).QueryLog(hc)
}

// Update returns a builder for updating this HashChain.
// Note that you need to call HashChain.Unwrap() before calling this method if this HashChain
// was returned from a transaction, and the transaction was committed or rolled back.
func (hc *HashChain) Update() *HashChainUpdateOne {
	return (&HashChainClient{config: hc.config}).UpdateOne(hc)
}

// Unwrap unwraps the HashChain entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hc *HashChain) Unwrap() *HashChain {
	_tx, ok := hc.config.driver.(*txDriver)
	if !ok {
		panic("ent: HashChain is not a transactional entity")
	}
	hc.config.driver = _tx.drv
	return hc
}

// String implements the fmt.Stringer.
func (hc *HashChain) String() string {
	var builder strings.Builder
	builder.WriteString("HashChain(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hc.ID))
	builder.WriteString("hash=")
	builder.WriteString(fmt.Sprintf("%v", hc.Hash))
	builder.WriteString(", ")
	builder.WriteString("signature=")
	builder.WriteString(fmt.Sprintf("%v", hc.Signature))
	builder.WriteByte(')')
	return builder.String()
}

// HashChains is a parsable slice of HashChain.
type HashChains []*HashChain

func (hc HashChains) config(cfg config) {
	for _i := range hc {
		hc[_i].config = cfg
	}
}
