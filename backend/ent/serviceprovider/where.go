// Code generated by entc, DO NOT EDIT.

package serviceprovider

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ochanoco/proxy/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Host applies equality check predicate on the "host" field. It's identical to HostEQ.
func Host(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHost), v))
	})
}

// DestinationIP applies equality check predicate on the "destination_ip" field. It's identical to DestinationIPEQ.
func DestinationIP(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDestinationIP), v))
	})
}

// HostEQ applies the EQ predicate on the "host" field.
func HostEQ(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHost), v))
	})
}

// HostNEQ applies the NEQ predicate on the "host" field.
func HostNEQ(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHost), v))
	})
}

// HostIn applies the In predicate on the "host" field.
func HostIn(vs ...string) predicate.ServiceProvider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHost), v...))
	})
}

// HostNotIn applies the NotIn predicate on the "host" field.
func HostNotIn(vs ...string) predicate.ServiceProvider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHost), v...))
	})
}

// HostGT applies the GT predicate on the "host" field.
func HostGT(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHost), v))
	})
}

// HostGTE applies the GTE predicate on the "host" field.
func HostGTE(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHost), v))
	})
}

// HostLT applies the LT predicate on the "host" field.
func HostLT(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHost), v))
	})
}

// HostLTE applies the LTE predicate on the "host" field.
func HostLTE(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHost), v))
	})
}

// HostContains applies the Contains predicate on the "host" field.
func HostContains(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHost), v))
	})
}

// HostHasPrefix applies the HasPrefix predicate on the "host" field.
func HostHasPrefix(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHost), v))
	})
}

// HostHasSuffix applies the HasSuffix predicate on the "host" field.
func HostHasSuffix(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHost), v))
	})
}

// HostEqualFold applies the EqualFold predicate on the "host" field.
func HostEqualFold(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHost), v))
	})
}

// HostContainsFold applies the ContainsFold predicate on the "host" field.
func HostContainsFold(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHost), v))
	})
}

// DestinationIPEQ applies the EQ predicate on the "destination_ip" field.
func DestinationIPEQ(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDestinationIP), v))
	})
}

// DestinationIPNEQ applies the NEQ predicate on the "destination_ip" field.
func DestinationIPNEQ(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDestinationIP), v))
	})
}

// DestinationIPIn applies the In predicate on the "destination_ip" field.
func DestinationIPIn(vs ...string) predicate.ServiceProvider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDestinationIP), v...))
	})
}

// DestinationIPNotIn applies the NotIn predicate on the "destination_ip" field.
func DestinationIPNotIn(vs ...string) predicate.ServiceProvider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDestinationIP), v...))
	})
}

// DestinationIPGT applies the GT predicate on the "destination_ip" field.
func DestinationIPGT(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDestinationIP), v))
	})
}

// DestinationIPGTE applies the GTE predicate on the "destination_ip" field.
func DestinationIPGTE(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDestinationIP), v))
	})
}

// DestinationIPLT applies the LT predicate on the "destination_ip" field.
func DestinationIPLT(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDestinationIP), v))
	})
}

// DestinationIPLTE applies the LTE predicate on the "destination_ip" field.
func DestinationIPLTE(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDestinationIP), v))
	})
}

// DestinationIPContains applies the Contains predicate on the "destination_ip" field.
func DestinationIPContains(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDestinationIP), v))
	})
}

// DestinationIPHasPrefix applies the HasPrefix predicate on the "destination_ip" field.
func DestinationIPHasPrefix(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDestinationIP), v))
	})
}

// DestinationIPHasSuffix applies the HasSuffix predicate on the "destination_ip" field.
func DestinationIPHasSuffix(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDestinationIP), v))
	})
}

// DestinationIPEqualFold applies the EqualFold predicate on the "destination_ip" field.
func DestinationIPEqualFold(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDestinationIP), v))
	})
}

// DestinationIPContainsFold applies the ContainsFold predicate on the "destination_ip" field.
func DestinationIPContainsFold(v string) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDestinationIP), v))
	})
}

// HasWhitelists applies the HasEdge predicate on the "whitelists" edge.
func HasWhitelists() predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WhitelistsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WhitelistsTable, WhitelistsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWhitelistsWith applies the HasEdge predicate on the "whitelists" edge with a given conditions (other predicates).
func HasWhitelistsWith(preds ...predicate.WhiteList) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WhitelistsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WhitelistsTable, WhitelistsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAuthorizationCodes applies the HasEdge predicate on the "authorization_codes" edge.
func HasAuthorizationCodes() predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AuthorizationCodesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AuthorizationCodesTable, AuthorizationCodesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorizationCodesWith applies the HasEdge predicate on the "authorization_codes" edge with a given conditions (other predicates).
func HasAuthorizationCodesWith(preds ...predicate.AuthorizationCode) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AuthorizationCodesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AuthorizationCodesTable, AuthorizationCodesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServiceProvider) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServiceProvider) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServiceProvider) predicate.ServiceProvider {
	return predicate.ServiceProvider(func(s *sql.Selector) {
		p(s.Not())
	})
}
