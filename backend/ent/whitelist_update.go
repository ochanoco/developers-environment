// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ochanoco/proxy/ent/predicate"
	"github.com/ochanoco/proxy/ent/serviceprovider"
	"github.com/ochanoco/proxy/ent/whitelist"
)

// WhiteListUpdate is the builder for updating WhiteList entities.
type WhiteListUpdate struct {
	config
	hooks    []Hook
	mutation *WhiteListMutation
}

// Where appends a list predicates to the WhiteListUpdate builder.
func (wlu *WhiteListUpdate) Where(ps ...predicate.WhiteList) *WhiteListUpdate {
	wlu.mutation.Where(ps...)
	return wlu
}

// SetPath sets the "path" field.
func (wlu *WhiteListUpdate) SetPath(s string) *WhiteListUpdate {
	wlu.mutation.SetPath(s)
	return wlu
}

// SetOwnerID sets the "owner" edge to the ServiceProvider entity by ID.
func (wlu *WhiteListUpdate) SetOwnerID(id int) *WhiteListUpdate {
	wlu.mutation.SetOwnerID(id)
	return wlu
}

// SetNillableOwnerID sets the "owner" edge to the ServiceProvider entity by ID if the given value is not nil.
func (wlu *WhiteListUpdate) SetNillableOwnerID(id *int) *WhiteListUpdate {
	if id != nil {
		wlu = wlu.SetOwnerID(*id)
	}
	return wlu
}

// SetOwner sets the "owner" edge to the ServiceProvider entity.
func (wlu *WhiteListUpdate) SetOwner(s *ServiceProvider) *WhiteListUpdate {
	return wlu.SetOwnerID(s.ID)
}

// Mutation returns the WhiteListMutation object of the builder.
func (wlu *WhiteListUpdate) Mutation() *WhiteListMutation {
	return wlu.mutation
}

// ClearOwner clears the "owner" edge to the ServiceProvider entity.
func (wlu *WhiteListUpdate) ClearOwner() *WhiteListUpdate {
	wlu.mutation.ClearOwner()
	return wlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wlu *WhiteListUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(wlu.hooks) == 0 {
		affected, err = wlu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WhiteListMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wlu.mutation = mutation
			affected, err = wlu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wlu.hooks) - 1; i >= 0; i-- {
			if wlu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wlu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wlu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wlu *WhiteListUpdate) SaveX(ctx context.Context) int {
	affected, err := wlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wlu *WhiteListUpdate) Exec(ctx context.Context) error {
	_, err := wlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wlu *WhiteListUpdate) ExecX(ctx context.Context) {
	if err := wlu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wlu *WhiteListUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   whitelist.Table,
			Columns: whitelist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: whitelist.FieldID,
			},
		},
	}
	if ps := wlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wlu.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: whitelist.FieldPath,
		})
	}
	if wlu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   whitelist.OwnerTable,
			Columns: []string{whitelist.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: serviceprovider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wlu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   whitelist.OwnerTable,
			Columns: []string{whitelist.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: serviceprovider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{whitelist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// WhiteListUpdateOne is the builder for updating a single WhiteList entity.
type WhiteListUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WhiteListMutation
}

// SetPath sets the "path" field.
func (wluo *WhiteListUpdateOne) SetPath(s string) *WhiteListUpdateOne {
	wluo.mutation.SetPath(s)
	return wluo
}

// SetOwnerID sets the "owner" edge to the ServiceProvider entity by ID.
func (wluo *WhiteListUpdateOne) SetOwnerID(id int) *WhiteListUpdateOne {
	wluo.mutation.SetOwnerID(id)
	return wluo
}

// SetNillableOwnerID sets the "owner" edge to the ServiceProvider entity by ID if the given value is not nil.
func (wluo *WhiteListUpdateOne) SetNillableOwnerID(id *int) *WhiteListUpdateOne {
	if id != nil {
		wluo = wluo.SetOwnerID(*id)
	}
	return wluo
}

// SetOwner sets the "owner" edge to the ServiceProvider entity.
func (wluo *WhiteListUpdateOne) SetOwner(s *ServiceProvider) *WhiteListUpdateOne {
	return wluo.SetOwnerID(s.ID)
}

// Mutation returns the WhiteListMutation object of the builder.
func (wluo *WhiteListUpdateOne) Mutation() *WhiteListMutation {
	return wluo.mutation
}

// ClearOwner clears the "owner" edge to the ServiceProvider entity.
func (wluo *WhiteListUpdateOne) ClearOwner() *WhiteListUpdateOne {
	wluo.mutation.ClearOwner()
	return wluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wluo *WhiteListUpdateOne) Select(field string, fields ...string) *WhiteListUpdateOne {
	wluo.fields = append([]string{field}, fields...)
	return wluo
}

// Save executes the query and returns the updated WhiteList entity.
func (wluo *WhiteListUpdateOne) Save(ctx context.Context) (*WhiteList, error) {
	var (
		err  error
		node *WhiteList
	)
	if len(wluo.hooks) == 0 {
		node, err = wluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WhiteListMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wluo.mutation = mutation
			node, err = wluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wluo.hooks) - 1; i >= 0; i-- {
			if wluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wluo *WhiteListUpdateOne) SaveX(ctx context.Context) *WhiteList {
	node, err := wluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wluo *WhiteListUpdateOne) Exec(ctx context.Context) error {
	_, err := wluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wluo *WhiteListUpdateOne) ExecX(ctx context.Context) {
	if err := wluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wluo *WhiteListUpdateOne) sqlSave(ctx context.Context) (_node *WhiteList, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   whitelist.Table,
			Columns: whitelist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: whitelist.FieldID,
			},
		},
	}
	id, ok := wluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WhiteList.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, whitelist.FieldID)
		for _, f := range fields {
			if !whitelist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != whitelist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wluo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: whitelist.FieldPath,
		})
	}
	if wluo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   whitelist.OwnerTable,
			Columns: []string{whitelist.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: serviceprovider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wluo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   whitelist.OwnerTable,
			Columns: []string{whitelist.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: serviceprovider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WhiteList{config: wluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{whitelist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
