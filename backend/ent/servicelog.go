// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ochanoco/proxy/ent/servicelog"
)

// ServiceLog is the model entity for the ServiceLog schema.
type ServiceLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Headers holds the value of the "headers" field.
	Headers string `json:"headers,omitempty"`
	// Body holds the value of the "body" field.
	Body []byte `json:"body,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case servicelog.FieldBody:
			values[i] = new([]byte)
		case servicelog.FieldID:
			values[i] = new(sql.NullInt64)
		case servicelog.FieldHeaders:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ServiceLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceLog fields.
func (sl *ServiceLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servicelog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sl.ID = int(value.Int64)
		case servicelog.FieldHeaders:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field headers", values[i])
			} else if value.Valid {
				sl.Headers = value.String
			}
		case servicelog.FieldBody:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value != nil {
				sl.Body = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ServiceLog.
// Note that you need to call ServiceLog.Unwrap() before calling this method if this ServiceLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (sl *ServiceLog) Update() *ServiceLogUpdateOne {
	return (&ServiceLogClient{config: sl.config}).UpdateOne(sl)
}

// Unwrap unwraps the ServiceLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sl *ServiceLog) Unwrap() *ServiceLog {
	_tx, ok := sl.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceLog is not a transactional entity")
	}
	sl.config.driver = _tx.drv
	return sl
}

// String implements the fmt.Stringer.
func (sl *ServiceLog) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sl.ID))
	builder.WriteString("headers=")
	builder.WriteString(sl.Headers)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(fmt.Sprintf("%v", sl.Body))
	builder.WriteByte(')')
	return builder.String()
}

// ServiceLogs is a parsable slice of ServiceLog.
type ServiceLogs []*ServiceLog

func (sl ServiceLogs) config(cfg config) {
	for _i := range sl {
		sl[_i].config = cfg
	}
}
