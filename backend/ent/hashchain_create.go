// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ochanoco/proxy/ent/hashchain"
	"github.com/ochanoco/proxy/ent/servicelog"
)

// HashChainCreate is the builder for creating a HashChain entity.
type HashChainCreate struct {
	config
	mutation *HashChainMutation
	hooks    []Hook
}

// SetHash sets the "hash" field.
func (hcc *HashChainCreate) SetHash(b []byte) *HashChainCreate {
	hcc.mutation.SetHash(b)
	return hcc
}

// SetSignature sets the "signature" field.
func (hcc *HashChainCreate) SetSignature(b []byte) *HashChainCreate {
	hcc.mutation.SetSignature(b)
	return hcc
}

// SetLogID sets the "log" edge to the ServiceLog entity by ID.
func (hcc *HashChainCreate) SetLogID(id int) *HashChainCreate {
	hcc.mutation.SetLogID(id)
	return hcc
}

// SetNillableLogID sets the "log" edge to the ServiceLog entity by ID if the given value is not nil.
func (hcc *HashChainCreate) SetNillableLogID(id *int) *HashChainCreate {
	if id != nil {
		hcc = hcc.SetLogID(*id)
	}
	return hcc
}

// SetLog sets the "log" edge to the ServiceLog entity.
func (hcc *HashChainCreate) SetLog(s *ServiceLog) *HashChainCreate {
	return hcc.SetLogID(s.ID)
}

// Mutation returns the HashChainMutation object of the builder.
func (hcc *HashChainCreate) Mutation() *HashChainMutation {
	return hcc.mutation
}

// Save creates the HashChain in the database.
func (hcc *HashChainCreate) Save(ctx context.Context) (*HashChain, error) {
	var (
		err  error
		node *HashChain
	)
	if len(hcc.hooks) == 0 {
		if err = hcc.check(); err != nil {
			return nil, err
		}
		node, err = hcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HashChainMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hcc.check(); err != nil {
				return nil, err
			}
			hcc.mutation = mutation
			if node, err = hcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(hcc.hooks) - 1; i >= 0; i-- {
			if hcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, hcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*HashChain)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from HashChainMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (hcc *HashChainCreate) SaveX(ctx context.Context) *HashChain {
	v, err := hcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcc *HashChainCreate) Exec(ctx context.Context) error {
	_, err := hcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcc *HashChainCreate) ExecX(ctx context.Context) {
	if err := hcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hcc *HashChainCreate) check() error {
	if _, ok := hcc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "HashChain.hash"`)}
	}
	if _, ok := hcc.mutation.Signature(); !ok {
		return &ValidationError{Name: "signature", err: errors.New(`ent: missing required field "HashChain.signature"`)}
	}
	return nil
}

func (hcc *HashChainCreate) sqlSave(ctx context.Context) (*HashChain, error) {
	_node, _spec := hcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (hcc *HashChainCreate) createSpec() (*HashChain, *sqlgraph.CreateSpec) {
	var (
		_node = &HashChain{config: hcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: hashchain.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hashchain.FieldID,
			},
		}
	)
	if value, ok := hcc.mutation.Hash(); ok {
		_spec.SetField(hashchain.FieldHash, field.TypeBytes, value)
		_node.Hash = value
	}
	if value, ok := hcc.mutation.Signature(); ok {
		_spec.SetField(hashchain.FieldSignature, field.TypeBytes, value)
		_node.Signature = value
	}
	if nodes := hcc.mutation.LogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hashchain.LogTable,
			Columns: []string{hashchain.LogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: servicelog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.service_log_hashchains = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HashChainCreateBulk is the builder for creating many HashChain entities in bulk.
type HashChainCreateBulk struct {
	config
	builders []*HashChainCreate
}

// Save creates the HashChain entities in the database.
func (hccb *HashChainCreateBulk) Save(ctx context.Context) ([]*HashChain, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hccb.builders))
	nodes := make([]*HashChain, len(hccb.builders))
	mutators := make([]Mutator, len(hccb.builders))
	for i := range hccb.builders {
		func(i int, root context.Context) {
			builder := hccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HashChainMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hccb *HashChainCreateBulk) SaveX(ctx context.Context) []*HashChain {
	v, err := hccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hccb *HashChainCreateBulk) Exec(ctx context.Context) error {
	_, err := hccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hccb *HashChainCreateBulk) ExecX(ctx context.Context) {
	if err := hccb.Exec(ctx); err != nil {
		panic(err)
	}
}
